name: build

on: [push]

jobs:

  test:
    name: TestSampleTests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Output dotnet info
        run: dotnet --info

      - name: Restore SampleTests
        run: |
          dotnet restore ./SampleTests/SampleTests.csproj --verbosity m

      - name: Build SampleTests
        run: |
          dotnet build ./SampleTests/SampleTests.csproj --configuration Release --no-restore

      # - name: Get failed tests
      #   uses: jameschristou/actions-get-failed-tests-from-artifacts@0061dd624be3dab5ea6d24d3c8f8061122dcc117
      #   id: get_failed_tests
      #   with:
      #       run_name: "TestSampleTests" # Eventually get TestSampleTests as input
      #       github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get previous run attempt
        id: get-previous-run-attempt
        run:  |
            current_run_attempt=${{github.run_attempt}}
            previous_run_attempt=$(($current_run_attempt - 1))
            echo "previous_run_attempt=$previous_run_attempt" >> $GITHUB_OUTPUT

      - name: Get name of previous test results archive
        id: get-name-of-previous-test-results-archive
        run:  |
            archive_name="TestSampleTests Test Results for Attempt-${{steps.get-previous-run-attempt.outputs.previous_run_attempt}}"
            echo "$(pwd)"
            ls
            echo "archive_name=$archive_name" >> $GITHUB_OUTPUT

      # not only does this step download the archive, it also extracts the files from the archive so we end up with the test results XML in the working folder
      - name: Download previous test results archive
        uses: actions/download-artifact@v4
        if: ${{ steps.get-previous-run-attempt.outputs.previous_run_attempt != '0' }}
        with:
            name: ${{steps.get-name-of-previous-test-results-archive.outputs.archive_name}}

      - name: Extract names of failed tests
        if: ${{ steps.get-previous-run-attempt.outputs.previous_run_attempt != '0' }}
        run:  |
            sudo apt-get update
            sudo apt-get install libxml2-utils

            # xmllint doesn't properly support xml namespaces so in this case we just strip them out with sed
                sed -e 's/encoding="UTF-16"?>/encoding="UTF-8"?>/' TestSampleTests-attempt-${{steps.get-previous-run-attempt.outputs.previous_run_attempt}}.xml | \
                sed -e 's/xmlns="[^"]*"//g' | \
                xmllint --xpath "//UnitTestResult[@outcome='Failed']/@testName"
            #xmllint --xpath "//UnitTestResult[@outcome='Failed']/@testName" TestSampleTests-attempt-${{steps.get-previous-run-attempt.outputs.previous_run_attempt}}.xml 2>/dev/null

      - name: Update test filter
        id: update_test_filter
        run: |
            tests_filter="Category!=Manual" # default if there's no failed tests from last attempt

            if [ "${{steps.get-previous-run-attempt.outputs.previous_run_attempt}}" != "0" ]; then
                echo "there are failed tests from last run attempt to process"

                tests_filter=""

                # loop through results from XML parse

                # for failed_test in $(echo '${{steps.get_failed_tests.outputs.failed_tests}}' | jq -r '.[]'); do
                #     echo "Test found: ${failed_test}"
                #     tests_filter+="FullyQualifiedName=${failed_test}|"
                # done

                tests_filter="${tests_filter%?}"  # Remove the trailing |
            fi
            
            echo "tests_filter:${tests_filter}"
            echo "tests_filter=$tests_filter" >> $GITHUB_OUTPUT
        shell: bash

      - name: Test SampleTests
        run: |
          dotnet test ./SampleTests/SampleTests.csproj --configuration Release --no-restore --no-build --filter "${{steps.update_test_filter.outputs.tests_filter}}" --verbosity normal '-l:trx;LogFileName=TestSampleTests-attempt-${{github.run_attempt}}.xml' # Eventually get TestSampleTests as input

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
            name: TestSampleTests Test Results for Attempt-${{github.run_attempt}} # Eventually get TestSampleTests as input. The action uses this name to search for the test results on rerun
            path: ./SampleTests/TestResults/TestSampleTests-attempt-${{github.run_attempt}}.xml # Eventually get TestSampleTests as input
