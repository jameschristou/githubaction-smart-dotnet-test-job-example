name: build

on: [push, workflow_dispatch]

jobs:

  test:
    name: TestSampleTests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Output dotnet info
        run: dotnet --info

      - name: Restore SampleTests
        run: |
          dotnet restore ./SampleTests/SampleTests.csproj --verbosity m

      - name: Build SampleTests
        run: |
          dotnet build ./SampleTests/SampleTests.csproj --configuration Release --no-restore

      - name: Get previous run attempt
        id: get-previous-run-attempt
        run:  |
            current_run_attempt=${{github.run_attempt}}
            previous_run_attempt=$(($current_run_attempt - 1))
            echo "previous_run_attempt=$previous_run_attempt" >> $GITHUB_OUTPUT

      - name: Get name of previous test results archive
        id: get-name-of-previous-test-results-archive
        run:  |
            archive_name="TestSampleTests Test Results for Attempt-${{steps.get-previous-run-attempt.outputs.previous_run_attempt}}"
            echo "archive_name=$archive_name" >> $GITHUB_OUTPUT

      # not only does this step download the archive, it also extracts the files from the archive so we end up with the test results XML in the working folder
      - name: Download previous test results archive
        uses: actions/download-artifact@v4
        if: ${{ steps.get-previous-run-attempt.outputs.previous_run_attempt != '0' }}
        continue-on-error: true # if we fail to download the archive for whatever reason then we should just proceed anyway and try to run all tests again
        with:
            name: ${{steps.get-name-of-previous-test-results-archive.outputs.archive_name}}

      - name: Extract names of failed tests
        id: extract_failed_tests
        if: ${{ steps.get-previous-run-attempt.outputs.previous_run_attempt != '0' && success() }}
        continue-on-error: true # if we fail to process the XML results for whatever reason then we should just proceed anyway and try to run all tests again
        run:  |
            sudo apt-get update
            sudo apt-get install libxml2-utils

            sed -e 's/xmlns="[^"]*"//g' \
                    TestSampleTests-attempt-${{steps.get-previous-run-attempt.outputs.previous_run_attempt}}.xml | \
                    xmllint --xpath "//UnitTestResult[@outcome='Failed']/@testName" -

            # xmllint doesn't properly support xml namespaces so in this case we just strip them out with sed
            sed -e 's/xmlns="[^"]*"//g' \
                    TestSampleTests-attempt-${{steps.get-previous-run-attempt.outputs.previous_run_attempt}}.xml | \
                    xmllint --xpath "//UnitTestResult[@outcome='Failed']/@testName" - | \
                    tests.txt

      - name: Update test filter
        id: update_test_filter
        run: |
            tests_filter="Category!=Manual" # default if there's no failed tests from last attempt

            if [ -f "tests.txt" ]; then
                echo "File exists."

                first_line=$(head -n 1 "tests.txt")
                echo "First line:$first_line"

                tests_filter=""

                while IFS= read -r failed_test_line; do \
                    echo "failed_test_line:$failed_test_line"
                    failed_test=${failed_test_line:10} #strip testName=" from start of line
                    failed_test=${failed_test::-1} # strip trailing "

                    tests_filter+="FullyQualifiedName=${failed_test}|"
                done <<< tests.txt

                tests_filter="${tests_filter%?}"  # Remove the trailing |
            fi

            echo "tests_filter:${tests_filter}"
            echo "tests_filter=$tests_filter" >> $GITHUB_OUTPUT
        shell: bash

      - name: Test SampleTests
        run: |
          dotnet test ./SampleTests/SampleTests.csproj --configuration Release --no-restore --no-build --filter "${{steps.update_test_filter.outputs.tests_filter}}" --verbosity normal '-l:trx;LogFileName=TestSampleTests-attempt-${{github.run_attempt}}.xml' # Eventually get TestSampleTests as input

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
            name: TestSampleTests Test Results for Attempt-${{github.run_attempt}} # Eventually get TestSampleTests as input. The action uses this name to search for the test results on rerun
            path: ./SampleTests/TestResults/TestSampleTests-attempt-${{github.run_attempt}}.xml # Eventually get TestSampleTests as input
